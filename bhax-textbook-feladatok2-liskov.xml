<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Liskov!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    
    <section>
        <title>
            Liskov helyettesítés sértése
        </title>
        <para>
            Ebben a feladatban egy objektum orientált kódot kellett írnunk Java és C++
            nyelven, amely megsérti a Liskov elvet. Először is mi az a Liskov elv?
        </para>
        <para>
            A liskov elvet Barbara Liskov mutatta be először. Fő célja a rossz OO tervezés
            megakadályozása. Az elv kimondja, hogy ha S altípusa T-nek, akkor bármely helyen
            ahol T-t alkalmazzuk S-t is minden probléma nélkül használhatjuk úgy, hogy a
            programrész tulajdonságai nem változnak.
        </para>
        <para>
            Java kód:
        </para>
        <programlisting language="java">
<![CDATA[static class Macska {
    public void szőrös() {}
}

static class Program {
    void fgv (Macska macska) {
        macska.szőrös();
    }
}

static class Perzsa extends Macska {}
static class Szfinx extends Macska {}

public static void main(String[] args) {
    Program program = new Program();
    Macska macska = new Macska();
    program.fgv(macska);

    Perzsa perzsa = new Perzsa();
    program.fgv(perzsa);

    Szfinx szfinx = new Szfinx();
    program.fgv(szfinx);
}]]>
        </programlisting>
        <para>
            C++ kód:
        </para>
        <programlisting language="c++">
<![CDATA[class Macska {
public:
	virtual void szőrös() {};
};

class Program {
public:
	void fgv(Macska& macska) {
		macska.szőrös();
	}
};

class Perzsa : public Macska {};
class Szfinx : public Macska {};

int main(int argc, char** argv) {
	Program program;
	Macska macska;
	program.fgv(macska);

	Perzsa perzsa;
	program.fgv(perzsa);

	Szfinx szfinx;
	program.fgv(szfinx);
}
]]>
        </programlisting>
        <para>
            A kódokban a Macska nevű ősosztály a T, ennek gyermekosztályai pedig a
            Perzsa és a Szfinx ami itt az S. A Macska nevű osztály tartalmaz egy szőrös()
            nevű függvényt, ez azt jelenti, hogy minden macska szőrös, de ez nem igaz.
            A szfinx fajtájú macskák szőrtelenek. Azonban a program őt is szőrösnek titulálja.
            A Liskov elv így sérül, mivel van olyan leszármazott, amely nem rendelkezik az őse
            tulajdonságával, így behelyettesíteni sem lehet az ős helyére a leszármazottat.
        </para>
        <para>Úgy tudjuk kiküszöbölni ezt a hibát itt, hogy létrehozunk, még egy osztályt
            SzőrösMacska néven amely a Macskából származik és ennek lesz leszármazottja a Perzsa. </para>
        <programlisting language="java">
<![CDATA[static class Macska {}

static class Program {
    void fgv (Macska macska) {}
}

static class SzőrösMacska extends Macska {
    public void szőrös() {}
}

static class Perzsa extends SzőrösMacska {}
static class Szfinx extends Macska {}

public static void main(String[] args) {
    Program program = new Program();
    Macska macska = new Macska();
    program.fgv(macska);

    Perzsa perzsa = new Perzsa();
    program.fgv(perzsa);

    Szfinx szfinx = new Szfinx();
    program.fgv(szfinx);
}]]>
        </programlisting>
        <para>
            A fent látható megoldással már nem sérül a Liskov elv.
        </para>
    </section>
    
    <section>
        <title>
            Szülő-gyerek
        </title>
        <para> Ennek a feladatnak a megoldásához tisztázni kell az öröklődés és a polimorfizmus
            fogalmát. Az öröklődés az, amikor egy osztályt egy már létező osztály kiterjesztésével
            definiálunk. Ekkor a már létező osztály lesz az ős- vagy szülőosztály. Az osztály amit
            pedig kiterjesztettünk leszármazott vagy gyermekosztálynak nevezzük. A létrejött utód
            egy új osztály lesz, amely örökli az ős metódusait, tagváltozóit. A public, protected,
            private kulcsszavakkal lehet megadni, hogy a gyermek melyik metódusokat, változókat
            lássa. A public-al rendelkezőket mindenki használhatja, a protected-et csak az ős
            leszármazottai. A private tagot csak az az osztály, amelyben létrehozták a tagot. </para>
        <para>
        A polimorfizmus lényege az, hogy mivel a gyermekosztály örökölt minden metódust és
        tagváltozót így egy olyan környezetben ahol az őst lehet használni a gyermeket is.
        </para>
        <para>Példa arra, hogy az ősön keresztül csak az ős üzenetei küldhetőek. Javaban:</para>
        <programlisting language="java">
<![CDATA[class Szulo {
    void szulometodus() {
        System.out.println("Szulo vagyok!");
    }
}

class Gyerek extends Szulo {
    void gyerekmetodus() {
        System.out.println("Gyerek vagyok!");
    }
}

class Szulo_Gyerek {
    public static void main(String[] args) {
    Szulo valaki = new Gyerek();
    
    valaki.szulometodus();
    valaki.gyerekmetodus(); //Nem látja a gyermekmetódusát!
    }
}]]>
        </programlisting>
        <mediaobject>
            <imageobject>
                <imagedata fileref="szulogyerekjavacmd.jpg"></imagedata>
            </imageobject>
        </mediaobject>
        <para>
            Ahogy a console-on is látszik a program nem látja a gyermekmetódusát, azoban a
            gyermek látja a szülő metódusát.
        </para>
        <para>
            C++-ban:
        </para>
        <programlisting language="c++">
<![CDATA[#include <iostream>

class Szulo {
public:
    void szulometodus() {
        std::cout << "Szulo vagyok!" << std::endl;
    }
};

class Gyerek : public Szulo {
public:
    void gyerekmetodus() {
        std::cout << "Gyerek vagyok!" << std::endl;
    }
};

int main() {
    Szulo* valaki = new Gyerek();

    valaki->szulometodus();
    valaki->gyerekmetodus(); //Nem látja a gyermekmetódusát!
}]]>
        </programlisting>
        <mediaobject>
            <imageobject>
                <imagedata fileref="szulogyerekcppcmd.jpg"></imagedata>
            </imageobject>
        </mediaobject>
        <para>
            Itt is ugyanúgy error kapunk, mivel hiába castoltuk a gyermeket szülővé az
            nem éri el a gyermek metódusát.
        </para>
    </section>
    
    <section>
        <title>
            Anti OO
        </title>
        <para> Össze kellett hasonlítani a BBP algoritmus kód futási idejét C, C++, Java és C#
            nyelven. Egy virtuális linux gépen futattam a kódokat. Ilyen eredményt kaptam:</para>
        <para>
            <table>
                <title>Összehasonlítás</title>
                <tgroup cols="5">
                    <colspec colname="c1"/>
                    <colspec colname="c2"/>
                    <colspec colname="c3"/>
                    <colspec colname="c4"/>
                    <colspec colname="c5"/>
                    <thead>
                        <row>
                            <entry></entry>
                            <entry>C</entry>
                            <entry>C++</entry>
                            <entry>Java</entry>
                            <entry>C#</entry>
                        </row>
                    </thead>
                    <tbody>
                        <row>
                            <entry>10^6</entry>
                            <entry>3.051</entry>
                            <entry>2.823</entry>
                            <entry>2.575</entry>
                            <entry>2.617</entry>
                        </row>
                        <row>
                            <entry>10^7</entry>
                            <entry>34.460</entry>
                            <entry>33.332</entry>
                            <entry>28.978</entry>
                            <entry>30.589</entry>
                        </row>
                        <row>
                            <entry>10^8</entry>
                            <entry>385.376</entry>
                            <entry>386.714</entry>
                            <entry>338.139</entry>
                            <entry>353.068</entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </para>
        <para> Ahogy látszik a C nyelv volt a leglassabb. Ez várható volt, hisz ez a legöregebb
            nyelv a négy közül. Leggyorsabb volt a Java kód, amely a 10^8 pozíciónál 10 másodperccel
            leelőzte a C# is. Több oka is van, hogy a Java legyőzött mindenkit. Elsőnek lehet
            mondani, hogy a memória kiosztást sokkal jobban kezeli, mint a többi nyelv. Valamint a
            JVM jobban optimalizálja a metódus hívásokat. Futás időben dinamikus elemzést tud
            végezni, hogy mire van szükség és mire nem, így gyorsabb működést képes nyújtani, mint
            egy C++ fordítóprogram.
        </para>
        <programlisting language="c++">
<![CDATA[for (d = 1000000; d < 1000001; ++d)
    {

      d16Pi = 0.0;

      d16S1t = d16Sj (d, 1);
      d16S4t = d16Sj (d, 4);
      d16S5t = d16Sj (d, 5);
      d16S6t = d16Sj (d, 6);

      d16Pi = 4.0 * d16S1t - 2.0 * d16S4t - d16S5t - d16S6t;

      d16Pi = d16Pi - floor (d16Pi);

      jegy = (int) floor (16.0 * d16Pi);

    }]]>
        </programlisting>
        <para>
            A d-t változtatva lehetett megadni a programnak, hogy 10^6-on, 10^7-en vagy
            10^8-on számjegyet szeretnénk megkapni. Java-ben ugyanígy csak ott paraméterként
            adtam át a számot.
        </para>
    </section>
    
    <section>
        <title>
            Ciklomantikus komplexitás
        </title>
        <para>
            Ebben a feladatban ki kellett számolnunk valamelyik programunk függvényeinek
            ciklomantikus komplexitását. Ezt én egy online program segítségével oldottam
            meg, a Lizard-dal. A BBP java kódját elemzte a program. Íme:
        </para>
        <mediaobject>
            <imageobject>
                <imagedata fileref="lizard1.jpg"></imagedata>
            </imageobject>
        </mediaobject>
        <para>
            Egyszerűen csak ki kell választanunk a forráskód nyelvét, majd beillesztenünk magát
            a kódot.
        </para>
        <mediaobject>
            <imageobject>
                <imagedata fileref="lizard2.jpg"></imagedata>
            </imageobject>
        </mediaobject>
        <para>
            A végeredményen a számok minél kissebbek annál jobb, hiszen ha túl bonyolultak
            a függvények nehezen olvasható a program.
        </para>
        <para>
            Számítása a gráfelméleten alapul. A forráskód alapján határozza meg
            az egyes függvények ciklomantikus komplexitását. Ez a független utak számát
            jelenti, hogy a program mennyire bonyolult vezérlési szempontból.
            Két út akkor számít függetlennek, ha mindkettőben van olyan pont, amely
            nem eleme a másiknak.
        </para>
    </section>
    
</chapter>
