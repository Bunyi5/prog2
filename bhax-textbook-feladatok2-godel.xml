<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Gödel!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    
    <section>
        <title>Gengszterek</title>
        <para>
            A C++11 vezette be a lambda kifejezést, ez teszi lehetővé számunkra, hogy inline
            függvényeket írjunk. Ezek rövid kódrészeletek, amelyeket nem használunk újra és
            nem érdemes megnevezni. Így kell definiálni:
        </para>
        <programlisting language="c++">
<![CDATA[[capture clause] (parameters) -> return-type
{
    definition of method
}]]>
        </programlisting>
        <para>
            A lambda kifejezés visszatérítési típusát általában maga a fordító értékeli, így
            figyelmen kívül hagyhatjuk a -> return-type részt, kivéve néhány komplex esetben.
        </para>
        <para>
            Az OOCWC-ben a 75. sorban lévő kódrészletben van a lényeg:
        </para>
        <programlisting language="c++">
<![CDATA[std::sort ( gangsters.begin(), gangsters.end(), [this, cop] ( Gangster x, Gangster y )
{
    return dst ( cop, x.to ) < dst ( cop, y.to );
} );]]>
        </programlisting>
        <para>
            Rendezésre az std::sort függvényt fogjuk használni, ami a benne szereplő lambda
            kifejezést fogja használni összehasonlításra. A sort metódus definiálása:
        </para>
        <programlisting language="c++">
<![CDATA[void sort (RandomAccessIterator first, RandomAccessIterator last, Compare comp);]]>
        </programlisting>
        <para>
            Ezzel a metódussal a gangsters vectort fogjuk rendezni. Paraméterként két Gangster
            objektumot vár. Ha az x gangster közelebb van az elkapott cop objektumhoz, mint az y
            gangster akkor igaz értéket térít vissza. Vagyis a rendezés után a vector elején a
            cophoz legközelebb álló gangsterek lesznek.
        </para>
    </section>
    
    <section>
        <title>C++11 Custom Allocator</title>
        <para>
            
        </para>
    </section>
    
    <section>
        <title>STL map érték szerinti rendezése</title>
        <para>
            A feladat az volt, hogy egy mapet ne a kulcs szerint rendezzünk, hanem az érték
            szerint. Íme a kód:
        </para>
        <programlisting language="c++">
<![CDATA[#include <iostream> 
#include <map>
#include <set>
#include <functional>

using namespace std;

int main() { 

    map<string, int> Map;

    Map.insert(pair<string, int>("a", 55));
    Map.insert(pair<string, int>("b", 21));
    Map.insert(pair<string, int>("c", 98));
    Map.insert(pair<string, int>("d", 62));
    Map.insert(pair<string, int>("e", 120));
    Map.insert(pair<string, int>("f", 34));
    Map.insert(pair<string, int>("g", 42));
    Map.insert(pair<string, int>("h", 29));
    Map.insert(pair<string, int>("i", 27));
    Map.insert(pair<string, int>("j", 87));

    typedef function<bool(pair<string, int>, pair<string, int>)> Hasonlito;

    Hasonlito hasonlit =
        [](pair<string, int> elso ,std::pair<string, int> masodik)
        {
            return elso.second < masodik.second;
        };
            
    set<pair<string, int>, Hasonlito> sortedMap(Map.begin(), Map.end(), hasonlit);

    for (pair<string, int> elem : Map)
        cout << elem.first << " :: " << elem.second << endl;

    cout << "-----" << endl;

    for (pair<string, int> elem : sortedMap)
        cout << elem.first << " :: " << elem.second << endl;
}]]>
        </programlisting>
        <para>
            Nézzük a kódot részekre bontva.
        </para>
        <programlisting language="c++">
<![CDATA[map<string, int> Map;

Map.insert(pair<string, int>("a", 55));
Map.insert(pair<string, int>("b", 21));
Map.insert(pair<string, int>("c", 98));
Map.insert(pair<string, int>("d", 62));
Map.insert(pair<string, int>("e", 120));
Map.insert(pair<string, int>("f", 34));
Map.insert(pair<string, int>("g", 42));
Map.insert(pair<string, int>("h", 29));
Map.insert(pair<string, int>("i", 27));
Map.insert(pair<string, int>("j", 87));]]>
        </programlisting>
        <para>
            Először is létrehozunk egy mapet, ahol a kulcs string típusú, az érték
            pedig int típusú lesz. A mapet feltöltjük értékekkel a map osztály
            beépített insert függvényével.
        </para>
        <programlisting language="c++">
<![CDATA[typedef function<bool(pair<string, int>, pair<string, int>)> Hasonlito;

Hasonlito hasonlit =
    [](pair<string, int> elso ,std::pair<string, int> masodik)
    {
        return elso.second < masodik.second;
    };]]>
        </programlisting>
        <para>
            Ezután létrehozok egy Hasonlito osztályt ami két párt kér el és egy bool típust
            ad vissza. Ennek az osztálynak létrehozok egy hasonlit metódust amely attól
            függően, hogy a két pár érték eleméből melyik a nagyobb igazat vagy hamisat ad
            vissza.
        </para>
        <programlisting language="c++">
<![CDATA[set<pair<string, int>, Hasonlito> sortedMap(Map.begin(), Map.end(), hasonlit);]]>
        </programlisting>
        <para>
            A seten belül történik a rendezés. A setnek meg kell adnom, hogy melyik osztályt
            használja a rendezéshez. Majd megadom a Map kezdő és végértékét és a metódust
            amelyet használnia kell a rendezéshez.
        </para>
        <programlisting language="c++">
<![CDATA[for (pair<string, int> elem : Map)
    cout << elem.first << " :: " << elem.second << endl;

cout << "-----" << endl;

for (pair<string, int> elem : sortedMap)
    cout << elem.first << " :: " << elem.second << endl;]]>
        </programlisting>
        <para>
            Már csak a kiíratás marad amit egy for each ciklussal teszek meg. Elsőnek az
            eredeti Map-et íratom ki majd a már rendezettet. Ezt kaptam:
        </para>
        <mediaobject>
            <imageobject>
                <imagedata fileref="sortmapcmd.jpg"></imagedata>
            </imageobject>
        </mediaobject>
    </section>
    
    <section>
        <title>Alternatív Tabella rendezése</title>
        <para>
            Ebben a feladatban a Comparable interface szerepére kellett rávilágítani.
            A Comparable interfacet használjuk a felhasználó által létrehozott osztályok
            rendezésére. Az interface a java.lang csomagban található és csak egyetlen
            metódust tartalmaz: <function>compareTo(Objektum)</function>.
            Így van a Csapat osztályban implementálva:
        </para>
        <programlisting language="java">
<![CDATA[class Csapat implements Comparable<Csapat> {

    protected String nev;
    protected double ertek;

    public Csapat(String nev, double ertek) {
        this.nev = nev;
        this.ertek = ertek;
    }

    public int compareTo(Csapat csapat) {
        if (this.ertek < csapat.ertek) {
            return -1;
        } else if (this.ertek > csapat.ertek) {
            return 1;
        } else {
            return 0;
        }
    }
}]]>
        </programlisting>
        <para>
            Ezt az interfacet is mint ahogy a többit az implements kulcsszóval lehet
            implementálni. Valamint az interface kacsacsőrei között meg kell adni egy T
            típusú objektumot. A compareTo metódusnak egy Csapat objektumot kell megadni.
            Ha az objektum amihez hasonlítunk kisebb, mint az amit a zárójelen belül adunk
            meg akkor -1-el, ha nagyobb akkor 1-el, ha egyenlő akkor 0-val tér vissza.
        </para>
        <programlisting language="java">
<![CDATA[java.util.List<Csapat> rendezettCsapatok = java.util.Arrays.asList(csapatok);
java.util.Collections.sort(rendezettCsapatok);]]>
        </programlisting>
        <para>
            Azért kellett itt a Comparable interfacet implementálni mivel a sort azaz
            a rendezés csak olyan listákon működik amelynek minden eleme implemetálja ezt.
            Így probléma nélkül megtudjuk rá hívni a Collections.sort metódusát.
        </para>
    </section>
    
    <section>
        <title>Prolog családfa</title>
        <para>
            
        </para>
    </section>
    
    <section>
        <title>GIMP Scheme hack</title>
        <para>
            
        </para>
    </section>
</chapter>

